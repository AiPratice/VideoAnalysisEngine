# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_yael')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_yael')
    _yael = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_yael', [dirname(__file__)])
        except ImportError:
            import _yael
            return _yael
        if fp is not None:
            try:
                _mod = imp.load_module('_yael', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _yael = swig_import_helper()
    del swig_import_helper
else:
    import _yael
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def _frompointer_and_acquire(aclass,ptr):
  r=aclass.frompointer(ptr)
  if r: r.this.acquire()
  return r


def fvec_from_pointer_long(ptr):
    return _yael.fvec_from_pointer_long(ptr)
fvec_from_pointer_long = _yael.fvec_from_pointer_long

def fvec_to_pointer_long(fv):
    return _yael.fvec_to_pointer_long(fv)
fvec_to_pointer_long = _yael.fvec_to_pointer_long

def dvec_from_pointer_long(ptr):
    return _yael.dvec_from_pointer_long(ptr)
dvec_from_pointer_long = _yael.dvec_from_pointer_long

def dvec_to_pointer_long(fv):
    return _yael.dvec_to_pointer_long(fv)
dvec_to_pointer_long = _yael.dvec_to_pointer_long
class DoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _yael.new_DoubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_DoubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _yael.DoubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _yael.DoubleArray___setitem__(self, index, value)

    def cast(self):
        return _yael.DoubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_yael.DoubleArray_frompointer)
    else:
        frompointer = _yael.DoubleArray_frompointer

    def plus(self, i):
        return _yael.DoubleArray_plus(self, i)

    def clear(self, n):
        return _yael.DoubleArray_clear(self, n)

    def copyfrom(self, src, dest_ofs, n):
        return _yael.DoubleArray_copyfrom(self, src, dest_ofs, n)

    def tostring(self, n):
        return _yael.DoubleArray_tostring(self, n)

    def fromstring(self, obj):
        return _yael.DoubleArray_fromstring(self, obj)
DoubleArray_swigregister = _yael.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)
cvar = _yael.cvar

def DoubleArray_frompointer(t):
    return _yael.DoubleArray_frompointer(t)
DoubleArray_frompointer = _yael.DoubleArray_frompointer


DoubleArray.aptr=DoubleArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(DoubleArray,ptr))

class FloatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yael.delete_FloatArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _yael.FloatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _yael.FloatArray___setitem__(self, index, value)

    def cast(self):
        return _yael.FloatArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_yael.FloatArray_frompointer)
    else:
        frompointer = _yael.FloatArray_frompointer

    def plus(self, i):
        return _yael.FloatArray_plus(self, i)

    def clear(self, n):
        return _yael.FloatArray_clear(self, n)

    def copyfrom(self, src, dest_ofs, n):
        return _yael.FloatArray_copyfrom(self, src, dest_ofs, n)

    def tostring(self, n):
        return _yael.FloatArray_tostring(self, n)

    def fromstring(self, obj):
        return _yael.FloatArray_fromstring(self, obj)

    def __init__(self, *args):
        this = _yael.new_FloatArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
FloatArray_swigregister = _yael.FloatArray_swigregister
FloatArray_swigregister(FloatArray)

def FloatArray_frompointer(t):
    return _yael.FloatArray_frompointer(t)
FloatArray_frompointer = _yael.FloatArray_frompointer


FloatArray.aptr=FloatArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(FloatArray,ptr))

class IntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yael.delete_IntArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _yael.IntArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _yael.IntArray___setitem__(self, index, value)

    def cast(self):
        return _yael.IntArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_yael.IntArray_frompointer)
    else:
        frompointer = _yael.IntArray_frompointer

    def plus(self, i):
        return _yael.IntArray_plus(self, i)

    def clear(self, n):
        return _yael.IntArray_clear(self, n)

    def copyfrom(self, src, dest_ofs, n):
        return _yael.IntArray_copyfrom(self, src, dest_ofs, n)

    def tostring(self, n):
        return _yael.IntArray_tostring(self, n)

    def fromstring(self, obj):
        return _yael.IntArray_fromstring(self, obj)

    def __init__(self, *args):
        this = _yael.new_IntArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
IntArray_swigregister = _yael.IntArray_swigregister
IntArray_swigregister(IntArray)

def IntArray_frompointer(t):
    return _yael.IntArray_frompointer(t)
IntArray_frompointer = _yael.IntArray_frompointer


IntArray.aptr=IntArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(IntArray,ptr))

class bvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bvec, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _yael.new_bvec(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_bvec
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _yael.bvec___getitem__(self, index)

    def __setitem__(self, index, value):
        return _yael.bvec___setitem__(self, index, value)

    def cast(self):
        return _yael.bvec_cast(self)
    if _newclass:
        frompointer = staticmethod(_yael.bvec_frompointer)
    else:
        frompointer = _yael.bvec_frompointer

    def plus(self, i):
        return _yael.bvec_plus(self, i)

    def clear(self, n):
        return _yael.bvec_clear(self, n)

    def copyfrom(self, src, dest_ofs, n):
        return _yael.bvec_copyfrom(self, src, dest_ofs, n)

    def tostring(self, n):
        return _yael.bvec_tostring(self, n)

    def fromstring(self, obj):
        return _yael.bvec_fromstring(self, obj)
bvec_swigregister = _yael.bvec_swigregister
bvec_swigregister(bvec)

def bvec_frompointer(t):
    return _yael.bvec_frompointer(t)
bvec_frompointer = _yael.bvec_frompointer


bvec.aptr=bvec.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(bvec,ptr))

class lvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lvec, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _yael.new_lvec(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_lvec
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _yael.lvec___getitem__(self, index)

    def __setitem__(self, index, value):
        return _yael.lvec___setitem__(self, index, value)

    def cast(self):
        return _yael.lvec_cast(self)
    if _newclass:
        frompointer = staticmethod(_yael.lvec_frompointer)
    else:
        frompointer = _yael.lvec_frompointer

    def plus(self, i):
        return _yael.lvec_plus(self, i)

    def clear(self, n):
        return _yael.lvec_clear(self, n)

    def copyfrom(self, src, dest_ofs, n):
        return _yael.lvec_copyfrom(self, src, dest_ofs, n)

    def tostring(self, n):
        return _yael.lvec_tostring(self, n)

    def fromstring(self, obj):
        return _yael.lvec_fromstring(self, obj)
lvec_swigregister = _yael.lvec_swigregister
lvec_swigregister(lvec)

def lvec_frompointer(t):
    return _yael.lvec_frompointer(t)
lvec_frompointer = _yael.lvec_frompointer


lvec.aptr=lvec.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(lvec,ptr))

class UInt64Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt64Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt64Array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _yael.new_UInt64Array(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_UInt64Array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _yael.UInt64Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _yael.UInt64Array___setitem__(self, index, value)

    def cast(self):
        return _yael.UInt64Array_cast(self)
    if _newclass:
        frompointer = staticmethod(_yael.UInt64Array_frompointer)
    else:
        frompointer = _yael.UInt64Array_frompointer

    def plus(self, i):
        return _yael.UInt64Array_plus(self, i)

    def clear(self, n):
        return _yael.UInt64Array_clear(self, n)

    def copyfrom(self, src, dest_ofs, n):
        return _yael.UInt64Array_copyfrom(self, src, dest_ofs, n)

    def tostring(self, n):
        return _yael.UInt64Array_tostring(self, n)

    def fromstring(self, obj):
        return _yael.UInt64Array_fromstring(self, obj)
UInt64Array_swigregister = _yael.UInt64Array_swigregister
UInt64Array_swigregister(UInt64Array)

def UInt64Array_frompointer(t):
    return _yael.UInt64Array_frompointer(t)
UInt64Array_frompointer = _yael.UInt64Array_frompointer


UInt64Array.aptr=UInt64Array.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(UInt64Array,ptr))

class IntPtrArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntPtrArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntPtrArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _yael.new_IntPtrArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_IntPtrArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _yael.IntPtrArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _yael.IntPtrArray___setitem__(self, index, value)

    def cast(self):
        return _yael.IntPtrArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_yael.IntPtrArray_frompointer)
    else:
        frompointer = _yael.IntPtrArray_frompointer

    def plus(self, i):
        return _yael.IntPtrArray_plus(self, i)

    def clear(self, n):
        return _yael.IntPtrArray_clear(self, n)

    def copyfrom(self, src, dest_ofs, n):
        return _yael.IntPtrArray_copyfrom(self, src, dest_ofs, n)

    def tostring(self, n):
        return _yael.IntPtrArray_tostring(self, n)

    def fromstring(self, obj):
        return _yael.IntPtrArray_fromstring(self, obj)
IntPtrArray_swigregister = _yael.IntPtrArray_swigregister
IntPtrArray_swigregister(IntPtrArray)

def IntPtrArray_frompointer(t):
    return _yael.IntPtrArray_frompointer(t)
IntPtrArray_frompointer = _yael.IntPtrArray_frompointer


IntPtrArray.aptr=IntPtrArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(IntPtrArray,ptr))

class FloatPtrArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatPtrArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatPtrArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _yael.new_FloatPtrArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_FloatPtrArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _yael.FloatPtrArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _yael.FloatPtrArray___setitem__(self, index, value)

    def cast(self):
        return _yael.FloatPtrArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_yael.FloatPtrArray_frompointer)
    else:
        frompointer = _yael.FloatPtrArray_frompointer

    def plus(self, i):
        return _yael.FloatPtrArray_plus(self, i)

    def clear(self, n):
        return _yael.FloatPtrArray_clear(self, n)

    def copyfrom(self, src, dest_ofs, n):
        return _yael.FloatPtrArray_copyfrom(self, src, dest_ofs, n)

    def tostring(self, n):
        return _yael.FloatPtrArray_tostring(self, n)

    def fromstring(self, obj):
        return _yael.FloatPtrArray_fromstring(self, obj)
FloatPtrArray_swigregister = _yael.FloatPtrArray_swigregister
FloatPtrArray_swigregister(FloatPtrArray)

def FloatPtrArray_frompointer(t):
    return _yael.FloatPtrArray_frompointer(t)
FloatPtrArray_frompointer = _yael.FloatPtrArray_frompointer


FloatPtrArray.aptr=FloatPtrArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(FloatPtrArray,ptr))

class BytePtrArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BytePtrArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BytePtrArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _yael.new_BytePtrArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_BytePtrArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _yael.BytePtrArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _yael.BytePtrArray___setitem__(self, index, value)

    def cast(self):
        return _yael.BytePtrArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_yael.BytePtrArray_frompointer)
    else:
        frompointer = _yael.BytePtrArray_frompointer

    def plus(self, i):
        return _yael.BytePtrArray_plus(self, i)

    def clear(self, n):
        return _yael.BytePtrArray_clear(self, n)

    def copyfrom(self, src, dest_ofs, n):
        return _yael.BytePtrArray_copyfrom(self, src, dest_ofs, n)

    def tostring(self, n):
        return _yael.BytePtrArray_tostring(self, n)

    def fromstring(self, obj):
        return _yael.BytePtrArray_fromstring(self, obj)
BytePtrArray_swigregister = _yael.BytePtrArray_swigregister
BytePtrArray_swigregister(BytePtrArray)

def BytePtrArray_frompointer(t):
    return _yael.BytePtrArray_frompointer(t)
BytePtrArray_frompointer = _yael.BytePtrArray_frompointer


BytePtrArray.aptr=BytePtrArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(BytePtrArray,ptr))



fvec=FloatArray
dvec=DoubleArray
ivec=IntArray


def knn_full(distance_type, nq, nb, d, k, b, q, b_weights, assign, dis, peek_fun):
    return _yael.knn_full(distance_type, nq, nb, d, k, b, q, b_weights, assign, dis, peek_fun)
knn_full = _yael.knn_full

def knn_full_thread(distance_type, nq, nb, d, k, b, q, b_weights, assign, dis, n_thread, peek_fun):
    return _yael.knn_full_thread(distance_type, nq, nb, d, k, b, q, b_weights, assign, dis, n_thread, peek_fun)
knn_full_thread = _yael.knn_full_thread

def nn(n, nb, d, b, v, assign, peek_fun):
    return _yael.nn(n, nb, d, b, v, assign, peek_fun)
nn = _yael.nn

def nn_thread(n, nb, d, b, v, assign, n_thread, peek_fun):
    return _yael.nn_thread(n, nb, d, b, v, assign, n_thread, peek_fun)
nn_thread = _yael.nn_thread

def knn(n, nb, d, k, b, v, assign, peek_fun):
    return _yael.knn(n, nb, d, k, b, v, assign, peek_fun)
knn = _yael.knn

def knn_thread(nq, nb, d, k, b, v, assign, n_thread, peek_fun):
    return _yael.knn_thread(nq, nb, d, k, b, v, assign, n_thread, peek_fun)
knn_thread = _yael.knn_thread

def knn_reorder_shortlist(n, nb, d, k, b, v, idx, dis):
    return _yael.knn_reorder_shortlist(n, nb, d, k, b, v, idx, dis)
knn_reorder_shortlist = _yael.knn_reorder_shortlist

def knn_recompute_exact_dists(n, nb, d, k, b, v, label0, kp, idx, dis):
    return _yael.knn_recompute_exact_dists(n, nb, d, k, b, v, label0, kp, idx, dis)
knn_recompute_exact_dists = _yael.knn_recompute_exact_dists

def compute_cross_distances(d, na, nb, a, b, dist2):
    return _yael.compute_cross_distances(d, na, nb, a, b, dist2)
compute_cross_distances = _yael.compute_cross_distances

def compute_cross_distances_nonpacked(d, na, nb, a, lda, b, ldb, dist2, ldd):
    return _yael.compute_cross_distances_nonpacked(d, na, nb, a, lda, b, ldb, dist2, ldd)
compute_cross_distances_nonpacked = _yael.compute_cross_distances_nonpacked

def compute_cross_distances_thread(d, na, nb, a, b, dist2, nt):
    return _yael.compute_cross_distances_thread(d, na, nb, a, b, dist2, nt)
compute_cross_distances_thread = _yael.compute_cross_distances_thread

def compute_cross_distances_alt(distance_type, d, na, nb, a, b, dist2):
    return _yael.compute_cross_distances_alt(distance_type, d, na, nb, a, b, dist2)
compute_cross_distances_alt = _yael.compute_cross_distances_alt

def compute_cross_distances_alt_nonpacked(distance_type, d, na, nb, a, lda, b, ldb, dist2, ldd):
    return _yael.compute_cross_distances_alt_nonpacked(distance_type, d, na, nb, a, lda, b, ldb, dist2, ldd)
compute_cross_distances_alt_nonpacked = _yael.compute_cross_distances_alt_nonpacked

def compute_cross_distances_alt_thread(distance_type, d, na, nb, a, b, dist2, nt):
    return _yael.compute_cross_distances_alt_thread(distance_type, d, na, nb, a, b, dist2, nt)
compute_cross_distances_alt_thread = _yael.compute_cross_distances_alt_thread

def compute_distances_1(d, nb, a, b, dist2):
    return _yael.compute_distances_1(d, nb, a, b, dist2)
compute_distances_1 = _yael.compute_distances_1

def compute_distances_1_nonpacked(d, nb, a, b, ldb, dist2):
    return _yael.compute_distances_1_nonpacked(d, nb, a, b, ldb, dist2)
compute_distances_1_nonpacked = _yael.compute_distances_1_nonpacked

def compute_distances_1_thread(d, nb, a, b, dist2, n_thread):
    return _yael.compute_distances_1_thread(d, nb, a, b, dist2, n_thread)
compute_distances_1_thread = _yael.compute_distances_1_thread

def compute_distances_1_nonpacked_thread(d, nb, a, b, ldb, dist2, n_thread):
    return _yael.compute_distances_1_nonpacked_thread(d, nb, a, b, ldb, dist2, n_thread)
compute_distances_1_nonpacked_thread = _yael.compute_distances_1_nonpacked_thread
KMEANS_QUIET = _yael.KMEANS_QUIET
KMEANS_INIT_BERKELEY = _yael.KMEANS_INIT_BERKELEY
KMEANS_NORMALIZE_CENTS = _yael.KMEANS_NORMALIZE_CENTS
KMEANS_INIT_RANDOM = _yael.KMEANS_INIT_RANDOM
KMEANS_INIT_USER = _yael.KMEANS_INIT_USER
KMEANS_L1 = _yael.KMEANS_L1
KMEANS_CHI2 = _yael.KMEANS_CHI2

def kmeans(d, n, k, niter, v, flags, seed, redo, centroids, dis, assign, nassign):
    return _yael.kmeans(d, n, k, niter, v, flags, seed, redo, centroids, dis, assign, nassign)
kmeans = _yael.kmeans

def clustering_kmeans(n, d, points, k, nb_iter_max, normalize):
    return _yael.clustering_kmeans(n, d, points, k, nb_iter_max, normalize)
clustering_kmeans = _yael.clustering_kmeans

def clustering_kmeans_assign(n, d, points, k, nb_iter_max, normalize):
    return _yael.clustering_kmeans_assign(n, d, points, k, nb_iter_max, normalize)
clustering_kmeans_assign = _yael.clustering_kmeans_assign

def clustering_kmeans_assign_with_score(n, d, points, k, nb_iter_max, normalize, n_thread, score_out):
    return _yael.clustering_kmeans_assign_with_score(n, d, points, k, nb_iter_max, normalize, n_thread, score_out)
clustering_kmeans_assign_with_score = _yael.clustering_kmeans_assign_with_score
class hkm_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hkm_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hkm_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nlevel"] = _yael.hkm_t_nlevel_set
    __swig_getmethods__["nlevel"] = _yael.hkm_t_nlevel_get
    if _newclass:
        nlevel = _swig_property(_yael.hkm_t_nlevel_get, _yael.hkm_t_nlevel_set)
    __swig_setmethods__["bf"] = _yael.hkm_t_bf_set
    __swig_getmethods__["bf"] = _yael.hkm_t_bf_get
    if _newclass:
        bf = _swig_property(_yael.hkm_t_bf_get, _yael.hkm_t_bf_set)
    __swig_setmethods__["k"] = _yael.hkm_t_k_set
    __swig_getmethods__["k"] = _yael.hkm_t_k_get
    if _newclass:
        k = _swig_property(_yael.hkm_t_k_get, _yael.hkm_t_k_set)
    __swig_setmethods__["d"] = _yael.hkm_t_d_set
    __swig_getmethods__["d"] = _yael.hkm_t_d_get
    if _newclass:
        d = _swig_property(_yael.hkm_t_d_get, _yael.hkm_t_d_set)
    __swig_setmethods__["centroids"] = _yael.hkm_t_centroids_set
    __swig_getmethods__["centroids"] = _yael.hkm_t_centroids_get
    if _newclass:
        centroids = _swig_property(_yael.hkm_t_centroids_get, _yael.hkm_t_centroids_set)

    def __init__(self):
        this = _yael.new_hkm_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_hkm_t
    __del__ = lambda self: None
hkm_t_swigregister = _yael.hkm_t_swigregister
hkm_t_swigregister(hkm_t)


def hkm_learn(n, d, nlevel, bf, v, nb_iter_max, nt, verbose):
    return _yael.hkm_learn(n, d, nlevel, bf, v, nb_iter_max, nt, verbose)
hkm_learn = _yael.hkm_learn

def hkm_delete(hkm):
    return _yael.hkm_delete(hkm)
hkm_delete = _yael.hkm_delete

def hkm_quantize(hkm, n, v, idx):
    return _yael.hkm_quantize(hkm, n, v, idx)
hkm_quantize = _yael.hkm_quantize

def hkm_write(filename, hkm):
    return _yael.hkm_write(filename, hkm)
hkm_write = _yael.hkm_write

def hkm_read(filename):
    return _yael.hkm_read(filename)
hkm_read = _yael.hkm_read

def hkm_get_centroids(hkm, l, no):
    return _yael.hkm_get_centroids(hkm, l, no)
hkm_get_centroids = _yael.hkm_get_centroids

def fvec_k_max(v, n, maxes, k):
    return _yael.fvec_k_max(v, n, maxes, k)
fvec_k_max = _yael.fvec_k_max

def fvec_k_min(v, n, mins, k):
    return _yael.fvec_k_min(v, n, mins, k)
fvec_k_min = _yael.fvec_k_min

def fvec_ranks_of(tab, n, vals, nval, minranks, maxranks):
    return _yael.fvec_ranks_of(tab, n, vals, nval, minranks, maxranks)
fvec_ranks_of = _yael.fvec_ranks_of

def fvec_ranks_inc_of(tab, n, vals, nval, minranks, maxranks):
    return _yael.fvec_ranks_inc_of(tab, n, vals, nval, minranks, maxranks)
fvec_ranks_inc_of = _yael.fvec_ranks_inc_of

def find_labels(labels, nres, ilabels, nilabels):
    return _yael.find_labels(labels, nres, ilabels, nilabels)
find_labels = _yael.find_labels

def fvec_min(f, n):
    return _yael.fvec_min(f, n)
fvec_min = _yael.fvec_min

def ivec_min(f, n):
    return _yael.ivec_min(f, n)
ivec_min = _yael.ivec_min

def fvec_max(f, n):
    return _yael.fvec_max(f, n)
fvec_max = _yael.fvec_max

def ivec_max(f, n):
    return _yael.ivec_max(f, n)
ivec_max = _yael.ivec_max

def fvec_arg_min(f, n):
    return _yael.fvec_arg_min(f, n)
fvec_arg_min = _yael.fvec_arg_min

def fvec_arg_max(f, n):
    return _yael.fvec_arg_max(f, n)
fvec_arg_max = _yael.fvec_arg_max

def fvec_median(f, n):
    return _yael.fvec_median(f, n)
fvec_median = _yael.fvec_median

def fvec_median_const(f, n):
    return _yael.fvec_median_const(f, n)
fvec_median_const = _yael.fvec_median_const

def fvec_quantile(f, n, q):
    return _yael.fvec_quantile(f, n, q)
fvec_quantile = _yael.fvec_quantile

def ivec_sort(tab, n):
    return _yael.ivec_sort(tab, n)
ivec_sort = _yael.ivec_sort

def ivec_sort_index(tab, n, perm):
    return _yael.ivec_sort_index(tab, n, perm)
ivec_sort_index = _yael.ivec_sort_index

def ivec_invert_perm(perm, n, iperm):
    return _yael.ivec_invert_perm(perm, n, iperm)
ivec_invert_perm = _yael.ivec_invert_perm

def fvec_sort(v, n):
    return _yael.fvec_sort(v, n)
fvec_sort = _yael.fvec_sort

def fvecs_sort(v, d, n):
    return _yael.fvecs_sort(v, d, n)
fvecs_sort = _yael.fvecs_sort

def fvec_sort_index(tab, n, perm):
    return _yael.fvec_sort_index(tab, n, perm)
fvec_sort_index = _yael.fvec_sort_index

def ivec_sort_by_permutation(v, order, n):
    return _yael.ivec_sort_by_permutation(v, order, n)
ivec_sort_by_permutation = _yael.ivec_sort_by_permutation

def fvec_sort_by_permutation(v, order, n):
    return _yael.fvec_sort_by_permutation(v, order, n)
fvec_sort_by_permutation = _yael.fvec_sort_by_permutation

def ivec_sorted_count_occurrences(v, n, val):
    return _yael.ivec_sorted_count_occurrences(v, n, val)
ivec_sorted_count_occurrences = _yael.ivec_sorted_count_occurrences

def ivec_sorted_find(v, n, val):
    return _yael.ivec_sorted_find(v, n, val)
ivec_sorted_find = _yael.ivec_sorted_find

def ivec_sorted_count_unique(v, n):
    return _yael.ivec_sorted_count_unique(v, n)
ivec_sorted_count_unique = _yael.ivec_sorted_count_unique

def ivec_sorted_count_occurrences_multiple(v, n, vals, nval):
    return _yael.ivec_sorted_count_occurrences_multiple(v, n, vals, nval)
ivec_sorted_count_occurrences_multiple = _yael.ivec_sorted_count_occurrences_multiple

def merge_ordered_sets(labels, vals, sizes, k):
    return _yael.merge_ordered_sets(labels, vals, sizes, k)
merge_ordered_sets = _yael.merge_ordered_sets

def compress_labels_by_disratio(labels, vals, n, ratio):
    return _yael.compress_labels_by_disratio(labels, vals, n, ratio)
compress_labels_by_disratio = _yael.compress_labels_by_disratio
class fbinheap_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fbinheap_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fbinheap_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _yael.fbinheap_s_val_set
    __swig_getmethods__["val"] = _yael.fbinheap_s_val_get
    if _newclass:
        val = _swig_property(_yael.fbinheap_s_val_get, _yael.fbinheap_s_val_set)
    __swig_setmethods__["label"] = _yael.fbinheap_s_label_set
    __swig_getmethods__["label"] = _yael.fbinheap_s_label_get
    if _newclass:
        label = _swig_property(_yael.fbinheap_s_label_get, _yael.fbinheap_s_label_set)
    __swig_setmethods__["k"] = _yael.fbinheap_s_k_set
    __swig_getmethods__["k"] = _yael.fbinheap_s_k_get
    if _newclass:
        k = _swig_property(_yael.fbinheap_s_k_get, _yael.fbinheap_s_k_set)
    __swig_setmethods__["maxk"] = _yael.fbinheap_s_maxk_set
    __swig_getmethods__["maxk"] = _yael.fbinheap_s_maxk_get
    if _newclass:
        maxk = _swig_property(_yael.fbinheap_s_maxk_get, _yael.fbinheap_s_maxk_set)

    def __init__(self):
        this = _yael.new_fbinheap_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_fbinheap_s
    __del__ = lambda self: None
fbinheap_s_swigregister = _yael.fbinheap_s_swigregister
fbinheap_s_swigregister(fbinheap_s)


def fbinheap_new(maxk):
    return _yael.fbinheap_new(maxk)
fbinheap_new = _yael.fbinheap_new

def fbinheap_sizeof(maxk):
    return _yael.fbinheap_sizeof(maxk)
fbinheap_sizeof = _yael.fbinheap_sizeof

def fbinheap_init(bh, maxk):
    return _yael.fbinheap_init(bh, maxk)
fbinheap_init = _yael.fbinheap_init

def fbinheap_delete(bh):
    return _yael.fbinheap_delete(bh)
fbinheap_delete = _yael.fbinheap_delete

def fbinheap_reset(bh):
    return _yael.fbinheap_reset(bh)
fbinheap_reset = _yael.fbinheap_reset

def fbinheap_add(bh, label, val):
    return _yael.fbinheap_add(bh, label, val)
fbinheap_add = _yael.fbinheap_add

def fbinheap_pop(bh):
    return _yael.fbinheap_pop(bh)
fbinheap_pop = _yael.fbinheap_pop

def fbinheap_addn(bh, n, labels, v):
    return _yael.fbinheap_addn(bh, n, labels, v)
fbinheap_addn = _yael.fbinheap_addn

def fbinheap_addn_label_range(bh, n, label0, v):
    return _yael.fbinheap_addn_label_range(bh, n, label0, v)
fbinheap_addn_label_range = _yael.fbinheap_addn_label_range

def fbinheap_sort_labels(bh, perm):
    return _yael.fbinheap_sort_labels(bh, perm)
fbinheap_sort_labels = _yael.fbinheap_sort_labels

def fbinheap_sort_values(bh, v):
    return _yael.fbinheap_sort_values(bh, v)
fbinheap_sort_values = _yael.fbinheap_sort_values

def fbinheap_sort(bh, labels, v):
    return _yael.fbinheap_sort(bh, labels, v)
fbinheap_sort = _yael.fbinheap_sort

def fbinheap_sort_per_labels(bh, labels, v):
    return _yael.fbinheap_sort_per_labels(bh, labels, v)
fbinheap_sort_per_labels = _yael.fbinheap_sort_per_labels

def fbinheap_display(bh):
    return _yael.fbinheap_display(bh)
fbinheap_display = _yael.fbinheap_display

def gaussrand():
    return _yael.gaussrand()
gaussrand = _yael.gaussrand

def fvec_new(n):
    return _yael.fvec_new(n)
fvec_new = _yael.fvec_new

def ivec_new(n):
    return _yael.ivec_new(n)
ivec_new = _yael.ivec_new

def bvec_new(n):
    return _yael.bvec_new(n)
bvec_new = _yael.bvec_new

def lvec_new(n):
    return _yael.lvec_new(n)
lvec_new = _yael.lvec_new

def dvec_new(n):
    return _yael.dvec_new(n)
dvec_new = _yael.dvec_new

def fvec_new_0(n):
    return _yael.fvec_new_0(n)
fvec_new_0 = _yael.fvec_new_0

def dvec_new_0(n):
    return _yael.dvec_new_0(n)
dvec_new_0 = _yael.dvec_new_0

def ivec_new_0(n):
    return _yael.ivec_new_0(n)
ivec_new_0 = _yael.ivec_new_0

def bvec_new_0(n):
    return _yael.bvec_new_0(n)
bvec_new_0 = _yael.bvec_new_0

def lvec_new_0(n):
    return _yael.lvec_new_0(n)
lvec_new_0 = _yael.lvec_new_0

def fvec_new_nan(n):
    return _yael.fvec_new_nan(n)
fvec_new_nan = _yael.fvec_new_nan

def fvec_new_set(n, val):
    return _yael.fvec_new_set(n, val)
fvec_new_set = _yael.fvec_new_set

def ivec_new_set(n, val):
    return _yael.ivec_new_set(n, val)
ivec_new_set = _yael.ivec_new_set

def fvec_new_rand(n):
    return _yael.fvec_new_rand(n)
fvec_new_rand = _yael.fvec_new_rand

def fvec_new_randn(n):
    return _yael.fvec_new_randn(n)
fvec_new_randn = _yael.fvec_new_randn

def fvec_randn_r(v, n, seed):
    return _yael.fvec_randn_r(v, n, seed)
fvec_randn_r = _yael.fvec_randn_r

def fvec_new_rand_r(n, seed):
    return _yael.fvec_new_rand_r(n, seed)
fvec_new_rand_r = _yael.fvec_new_rand_r

def fvec_new_randn_r(n, seed):
    return _yael.fvec_new_randn_r(n, seed)
fvec_new_randn_r = _yael.fvec_new_randn_r

def ivec_new_range(a, b):
    return _yael.ivec_new_range(a, b)
ivec_new_range = _yael.ivec_new_range

def ivec_new_cpy(v, n):
    return _yael.ivec_new_cpy(v, n)
ivec_new_cpy = _yael.ivec_new_cpy

def fvec_new_cpy(v, n):
    return _yael.fvec_new_cpy(v, n)
fvec_new_cpy = _yael.fvec_new_cpy

def ivec_new_random_perm(n):
    return _yael.ivec_new_random_perm(n)
ivec_new_random_perm = _yael.ivec_new_random_perm

def ivec_new_random_idx(n, k):
    return _yael.ivec_new_random_idx(n, k)
ivec_new_random_idx = _yael.ivec_new_random_idx

def ivec_new_random_perm_r(n, seed):
    return _yael.ivec_new_random_perm_r(n, seed)
ivec_new_random_perm_r = _yael.ivec_new_random_perm_r

def ivec_new_random_idx_r(n, k, seed):
    return _yael.ivec_new_random_idx_r(n, k, seed)
ivec_new_random_idx_r = _yael.ivec_new_random_idx_r

def fvec_resize(v, n):
    return _yael.fvec_resize(v, n)
fvec_resize = _yael.fvec_resize

def ivec_resize(v, n):
    return _yael.ivec_resize(v, n)
ivec_resize = _yael.ivec_resize

def ivec_new_histogram(k, v, n):
    return _yael.ivec_new_histogram(k, v, n)
ivec_new_histogram = _yael.ivec_new_histogram

def ivec_new_histogram_clip(k, v, n):
    return _yael.ivec_new_histogram_clip(k, v, n)
ivec_new_histogram_clip = _yael.ivec_new_histogram_clip

def fvec_new_histogram_clip(vmin, vmax, k, v, n):
    return _yael.fvec_new_histogram_clip(vmin, vmax, k, v, n)
fvec_new_histogram_clip = _yael.fvec_new_histogram_clip

def ivec_hash(v, n):
    return _yael.ivec_hash(v, n)
ivec_hash = _yael.ivec_hash

def ivec_replace(v, n, val, replace_val):
    return _yael.ivec_replace(v, n, val, replace_val)
ivec_replace = _yael.ivec_replace

def ivec_count_occurrences(v, n, val):
    return _yael.ivec_count_occurrences(v, n, val)
ivec_count_occurrences = _yael.ivec_count_occurrences

def fvec_count_occurrences(v, n, val):
    return _yael.fvec_count_occurrences(v, n, val)
fvec_count_occurrences = _yael.fvec_count_occurrences

def fvec_count_lt(v, n, val):
    return _yael.fvec_count_lt(v, n, val)
fvec_count_lt = _yael.fvec_count_lt

def ivec_count_lt(v, n, val):
    return _yael.ivec_count_lt(v, n, val)
ivec_count_lt = _yael.ivec_count_lt

def fvec_count_gt(v, n, val):
    return _yael.fvec_count_gt(v, n, val)
fvec_count_gt = _yael.fvec_count_gt

def ivec_count_gt(v, n, val):
    return _yael.ivec_count_gt(v, n, val)
ivec_count_gt = _yael.ivec_count_gt

def fvec_count_inrange(v, n, vmin, vmax):
    return _yael.fvec_count_inrange(v, n, vmin, vmax)
fvec_count_inrange = _yael.fvec_count_inrange

def ivec_count_inrange(v, n, vmin, vmax):
    return _yael.ivec_count_inrange(v, n, vmin, vmax)
ivec_count_inrange = _yael.ivec_count_inrange

def fvec_count_nan(v, n):
    return _yael.fvec_count_nan(v, n)
fvec_count_nan = _yael.fvec_count_nan

def fvec_count_nonfinite(v, n):
    return _yael.fvec_count_nonfinite(v, n)
fvec_count_nonfinite = _yael.fvec_count_nonfinite

def fvec_count_0(val, n):
    return _yael.fvec_count_0(val, n)
fvec_count_0 = _yael.fvec_count_0

def fvecs_fsize(fname):
    return _yael.fvecs_fsize(fname)
fvecs_fsize = _yael.fvecs_fsize

def ivecs_fsize(fname):
    return _yael.ivecs_fsize(fname)
ivecs_fsize = _yael.ivecs_fsize

def bvecs_fsize(fname):
    return _yael.bvecs_fsize(fname)
bvecs_fsize = _yael.bvecs_fsize

def lvecs_fsize(fname):
    return _yael.lvecs_fsize(fname)
lvecs_fsize = _yael.lvecs_fsize

def ivec_fwrite(f, v, d):
    return _yael.ivec_fwrite(f, v, d)
ivec_fwrite = _yael.ivec_fwrite

def fvec_fwrite(f, v, d):
    return _yael.fvec_fwrite(f, v, d)
fvec_fwrite = _yael.fvec_fwrite

def ivec_fwrite_raw(f, v, d):
    return _yael.ivec_fwrite_raw(f, v, d)
ivec_fwrite_raw = _yael.ivec_fwrite_raw

def fvec_fwrite_raw(f, v, d):
    return _yael.fvec_fwrite_raw(f, v, d)
fvec_fwrite_raw = _yael.fvec_fwrite_raw

def bvec_fwrite_raw(f, v, d):
    return _yael.bvec_fwrite_raw(f, v, d)
bvec_fwrite_raw = _yael.bvec_fwrite_raw

def ivec_write_raw(fname, v, d):
    return _yael.ivec_write_raw(fname, v, d)
ivec_write_raw = _yael.ivec_write_raw

def fvec_write_raw(fname, v, d):
    return _yael.fvec_write_raw(fname, v, d)
fvec_write_raw = _yael.fvec_write_raw

def bvec_write_raw(fname, v, d):
    return _yael.bvec_write_raw(fname, v, d)
bvec_write_raw = _yael.bvec_write_raw

def ivecs_fwrite(f, d, n, v):
    return _yael.ivecs_fwrite(f, d, n, v)
ivecs_fwrite = _yael.ivecs_fwrite

def fvecs_fwrite(fo, d, n, vf):
    return _yael.fvecs_fwrite(fo, d, n, vf)
fvecs_fwrite = _yael.fvecs_fwrite

def ivecs_write(fname, d, n, v):
    return _yael.ivecs_write(fname, d, n, v)
ivecs_write = _yael.ivecs_write

def ivecs_write_txt(fname, d, n, v):
    return _yael.ivecs_write_txt(fname, d, n, v)
ivecs_write_txt = _yael.ivecs_write_txt

def fvecs_write(fname, d, n, vf):
    return _yael.fvecs_write(fname, d, n, vf)
fvecs_write = _yael.fvecs_write

def fvecs_write_txt(fname, d, n, vf):
    return _yael.fvecs_write_txt(fname, d, n, vf)
fvecs_write_txt = _yael.fvecs_write_txt

def fvecs_new_read(fname):
    return _yael.fvecs_new_read(fname)
fvecs_new_read = _yael.fvecs_new_read

def fvecs_new_fread_max(f, nmax):
    return _yael.fvecs_new_fread_max(f, nmax)
fvecs_new_fread_max = _yael.fvecs_new_fread_max

def fvecs_new_mmap(fname):
    return _yael.fvecs_new_mmap(fname)
fvecs_new_mmap = _yael.fvecs_new_mmap

def ivecs_new_mmap(fname):
    return _yael.ivecs_new_mmap(fname)
ivecs_new_mmap = _yael.ivecs_new_mmap

def bvecs_new_read(fname, v_out):
    return _yael.bvecs_new_read(fname, v_out)
bvecs_new_read = _yael.bvecs_new_read

def lvecs_new_read(fname, v_out):
    return _yael.lvecs_new_read(fname, v_out)
lvecs_new_read = _yael.lvecs_new_read

def b2fvecs_new_read(fname, v_out):
    return _yael.b2fvecs_new_read(fname, v_out)
b2fvecs_new_read = _yael.b2fvecs_new_read

def fvecs_new_read_sparse(fname, d):
    return _yael.fvecs_new_read_sparse(fname, d)
fvecs_new_read_sparse = _yael.fvecs_new_read_sparse

def bvecs_new_from_siftgeo(fname, d_v_out, v_out, d_meta_out, meta_out):
    return _yael.bvecs_new_from_siftgeo(fname, d_v_out, v_out, d_meta_out, meta_out)
bvecs_new_from_siftgeo = _yael.bvecs_new_from_siftgeo

def fvecs_read(fname, d, n, v):
    return _yael.fvecs_read(fname, d, n, v)
fvecs_read = _yael.fvecs_read

def b2fvecs_read(fname, d, n, v):
    return _yael.b2fvecs_read(fname, d, n, v)
b2fvecs_read = _yael.b2fvecs_read

def fvecs_read_txt(fname, d, n, v):
    return _yael.fvecs_read_txt(fname, d, n, v)
fvecs_read_txt = _yael.fvecs_read_txt

def fvec_read(fname, d, a, o_f):
    return _yael.fvec_read(fname, d, a, o_f)
fvec_read = _yael.fvec_read

def fvec_fread(f, v, d_alloc):
    return _yael.fvec_fread(f, v, d_alloc)
fvec_fread = _yael.fvec_fread

def fvec_fread_raw(f, v, n):
    return _yael.fvec_fread_raw(f, v, n)
fvec_fread_raw = _yael.fvec_fread_raw

def ivec_fread_raw(f, v, n):
    return _yael.ivec_fread_raw(f, v, n)
ivec_fread_raw = _yael.ivec_fread_raw

def bvec_fread_raw(f, v, n):
    return _yael.bvec_fread_raw(f, v, n)
bvec_fread_raw = _yael.bvec_fread_raw

def fvec_new_fread_raw(f, n):
    return _yael.fvec_new_fread_raw(f, n)
fvec_new_fread_raw = _yael.fvec_new_fread_raw

def ivec_new_fread_raw(f, d):
    return _yael.ivec_new_fread_raw(f, d)
ivec_new_fread_raw = _yael.ivec_new_fread_raw

def bvec_new_fread_raw(f, n):
    return _yael.bvec_new_fread_raw(f, n)
bvec_new_fread_raw = _yael.bvec_new_fread_raw

def fvec_new_read_raw(fname, d):
    return _yael.fvec_new_read_raw(fname, d)
fvec_new_read_raw = _yael.fvec_new_read_raw

def ivec_new_read_raw(fname, d):
    return _yael.ivec_new_read_raw(fname, d)
ivec_new_read_raw = _yael.ivec_new_read_raw

def bvec_new_read_raw(fname, d):
    return _yael.bvec_new_read_raw(fname, d)
bvec_new_read_raw = _yael.bvec_new_read_raw

def fvecs_fread(f, v, n, d_alloc):
    return _yael.fvecs_fread(f, v, n, d_alloc)
fvecs_fread = _yael.fvecs_fread

def ivecs_fread(f, v, n, d_alloc):
    return _yael.ivecs_fread(f, v, n, d_alloc)
ivecs_fread = _yael.ivecs_fread

def bvecs_fread(f, v, n, d_alloc):
    return _yael.bvecs_fread(f, v, n, d_alloc)
bvecs_fread = _yael.bvecs_fread

def lvecs_fread(f, v, n, d_alloc):
    return _yael.lvecs_fread(f, v, n, d_alloc)
lvecs_fread = _yael.lvecs_fread

def b2fvecs_fread(f, v, n):
    return _yael.b2fvecs_fread(f, v, n)
b2fvecs_fread = _yael.b2fvecs_fread

def ivec_new_read(fname):
    return _yael.ivec_new_read(fname)
ivec_new_read = _yael.ivec_new_read

def ivec_fread(f, v, d_alloc):
    return _yael.ivec_fread(f, v, d_alloc)
ivec_fread = _yael.ivec_fread

def bvec_fread(f, v, d_alloc):
    return _yael.bvec_fread(f, v, d_alloc)
bvec_fread = _yael.bvec_fread

def b2fvec_fread(f, v):
    return _yael.b2fvec_fread(f, v)
b2fvec_fread = _yael.b2fvec_fread

def lvec_fread(f, v, d_alloc):
    return _yael.lvec_fread(f, v, d_alloc)
lvec_fread = _yael.lvec_fread

def ivecs_new_read(fname):
    return _yael.ivecs_new_read(fname)
ivecs_new_read = _yael.ivecs_new_read

def ivecs_new_fread_max(f, nmax):
    return _yael.ivecs_new_fread_max(f, nmax)
ivecs_new_fread_max = _yael.ivecs_new_fread_max

def fvec_print(v, n):
    return _yael.fvec_print(v, n)
fvec_print = _yael.fvec_print

def fvec_fprintf(f, v, n, fmt):
    return _yael.fvec_fprintf(f, v, n, fmt)
fvec_fprintf = _yael.fvec_fprintf

def ivec_print(v, n):
    return _yael.ivec_print(v, n)
ivec_print = _yael.ivec_print

def ivec_fprintf(f, v, n, fmt):
    return _yael.ivec_fprintf(f, v, n, fmt)
ivec_fprintf = _yael.ivec_fprintf

def ivec_index(v, n, val):
    return _yael.ivec_index(v, n, val)
ivec_index = _yael.ivec_index

def ivec2fvec(v, n):
    return _yael.ivec2fvec(v, n)
ivec2fvec = _yael.ivec2fvec

def bvec2fvec(v, n):
    return _yael.bvec2fvec(v, n)
bvec2fvec = _yael.bvec2fvec

def bvectofvec(v, vb, n):
    return _yael.bvectofvec(v, vb, n)
bvectofvec = _yael.bvectofvec

def fvec_0(v, n):
    return _yael.fvec_0(v, n)
fvec_0 = _yael.fvec_0

def ivec_0(v, n):
    return _yael.ivec_0(v, n)
ivec_0 = _yael.ivec_0

def fvec_nan(v, n):
    return _yael.fvec_nan(v, n)
fvec_nan = _yael.fvec_nan

def fvec_rand(v, n):
    return _yael.fvec_rand(v, n)
fvec_rand = _yael.fvec_rand

def fvec_randn(v, n):
    return _yael.fvec_randn(v, n)
fvec_randn = _yael.fvec_randn

def fvec_all_0(v, n):
    return _yael.fvec_all_0(v, n)
fvec_all_0 = _yael.fvec_all_0

def ivec_all_0(v, n):
    return _yael.ivec_all_0(v, n)
ivec_all_0 = _yael.ivec_all_0

def fvec_all_ge0(v, n):
    return _yael.fvec_all_ge0(v, n)
fvec_all_ge0 = _yael.fvec_all_ge0

def ivec_all_ge0(v, n):
    return _yael.ivec_all_ge0(v, n)
ivec_all_ge0 = _yael.ivec_all_ge0

def fvec_all_finite(v, n):
    return _yael.fvec_all_finite(v, n)
fvec_all_finite = _yael.fvec_all_finite

def fvec_set(v, n, val):
    return _yael.fvec_set(v, n, val)
fvec_set = _yael.fvec_set

def ivec_set(v, n, val):
    return _yael.ivec_set(v, n, val)
ivec_set = _yael.ivec_set

def ivec_cpy(vdest, vsource, n):
    return _yael.ivec_cpy(vdest, vsource, n)
ivec_cpy = _yael.ivec_cpy

def fvec_cpy(vdest, vsource, n):
    return _yael.fvec_cpy(vdest, vsource, n)
fvec_cpy = _yael.fvec_cpy

def bvec_cpy(vdest, vsource, n):
    return _yael.bvec_cpy(vdest, vsource, n)
bvec_cpy = _yael.bvec_cpy

def fvec_incr(v, n, scal):
    return _yael.fvec_incr(v, n, scal)
fvec_incr = _yael.fvec_incr

def fvec_decr(v, n, scal):
    return _yael.fvec_decr(v, n, scal)
fvec_decr = _yael.fvec_decr

def ivec_incr(v, n, scal):
    return _yael.ivec_incr(v, n, scal)
ivec_incr = _yael.ivec_incr

def ivec_decr(v, n, scal):
    return _yael.ivec_decr(v, n, scal)
ivec_decr = _yael.ivec_decr

def fvec_mul_by(v, n, scal):
    return _yael.fvec_mul_by(v, n, scal)
fvec_mul_by = _yael.fvec_mul_by

def fvec_div_by(v, n, scal):
    return _yael.fvec_div_by(v, n, scal)
fvec_div_by = _yael.fvec_div_by

def fvec_rdiv_by(v, n, scal):
    return _yael.fvec_rdiv_by(v, n, scal)
fvec_rdiv_by = _yael.fvec_rdiv_by

def fvec_add(v1, v2, n):
    return _yael.fvec_add(v1, v2, n)
fvec_add = _yael.fvec_add

def fvec_sub(v1, v2, n):
    return _yael.fvec_sub(v1, v2, n)
fvec_sub = _yael.fvec_sub

def fvec_rev_sub(v1, v2, n):
    return _yael.fvec_rev_sub(v1, v2, n)
fvec_rev_sub = _yael.fvec_rev_sub

def fvec_add_mul(v1, v2, n, scal):
    return _yael.fvec_add_mul(v1, v2, n, scal)
fvec_add_mul = _yael.fvec_add_mul

def fvec_mul(v1, v2, n):
    return _yael.fvec_mul(v1, v2, n)
fvec_mul = _yael.fvec_mul

def fvec_div(v1, v2, n):
    return _yael.fvec_div(v1, v2, n)
fvec_div = _yael.fvec_div

def fvec_normalize(v, n, norm):
    return _yael.fvec_normalize(v, n, norm)
fvec_normalize = _yael.fvec_normalize

def fvecs_normalize(v, n, d, norm):
    return _yael.fvecs_normalize(v, n, d, norm)
fvecs_normalize = _yael.fvecs_normalize

def fvec_round(v, n):
    return _yael.fvec_round(v, n)
fvec_round = _yael.fvec_round

def fvec_sqrt(v, n):
    return _yael.fvec_sqrt(v, n)
fvec_sqrt = _yael.fvec_sqrt

def fvec_sqr(v, n):
    return _yael.fvec_sqr(v, n)
fvec_sqr = _yael.fvec_sqr

def fvec_exp(v, n):
    return _yael.fvec_exp(v, n)
fvec_exp = _yael.fvec_exp

def fvec_log(v, n):
    return _yael.fvec_log(v, n)
fvec_log = _yael.fvec_log

def fvec_neg(v, n):
    return _yael.fvec_neg(v, n)
fvec_neg = _yael.fvec_neg

def fvec_ssqrt(v, n):
    return _yael.fvec_ssqrt(v, n)
fvec_ssqrt = _yael.fvec_ssqrt

def fvec_spow(v, n, scal):
    return _yael.fvec_spow(v, n, scal)
fvec_spow = _yael.fvec_spow

def fvec_normalize_2stage(v, n, scal):
    return _yael.fvec_normalize_2stage(v, n, scal)
fvec_normalize_2stage = _yael.fvec_normalize_2stage

def ivec_add(v1, v2, n):
    return _yael.ivec_add(v1, v2, n)
ivec_add = _yael.ivec_add

def ivec_sub(v1, v2, n):
    return _yael.ivec_sub(v1, v2, n)
ivec_sub = _yael.ivec_sub

def ivec_mul_by(v1, n, scal):
    return _yael.ivec_mul_by(v1, n, scal)
ivec_mul_by = _yael.ivec_mul_by

def ivec_mod_by(v1, n, scal):
    return _yael.ivec_mod_by(v1, n, scal)
ivec_mod_by = _yael.ivec_mod_by

def ivec_add_scalar(v, n, scal):
    return _yael.ivec_add_scalar(v, n, scal)
ivec_add_scalar = _yael.ivec_add_scalar

def fvec_purge_nans(v, n, replace_value):
    return _yael.fvec_purge_nans(v, n, replace_value)
fvec_purge_nans = _yael.fvec_purge_nans

def fvec_purge_nonfinite(v, n, replace_value):
    return _yael.fvec_purge_nonfinite(v, n, replace_value)
fvec_purge_nonfinite = _yael.fvec_purge_nonfinite

def fvec_shrink_nonfinite(v, n):
    return _yael.fvec_shrink_nonfinite(v, n)
fvec_shrink_nonfinite = _yael.fvec_shrink_nonfinite

def fvec_index_nonfinite(v, n):
    return _yael.fvec_index_nonfinite(v, n)
fvec_index_nonfinite = _yael.fvec_index_nonfinite

def fvec_sum(v, n):
    return _yael.fvec_sum(v, n)
fvec_sum = _yael.fvec_sum

def ivec_sum(v, n):
    return _yael.ivec_sum(v, n)
ivec_sum = _yael.ivec_sum

def fvec_cumsum(v, n):
    return _yael.fvec_cumsum(v, n)
fvec_cumsum = _yael.fvec_cumsum

def ivec_cumsum(v, n):
    return _yael.ivec_cumsum(v, n)
ivec_cumsum = _yael.ivec_cumsum

def fvec_cumdiff(v, n):
    return _yael.fvec_cumdiff(v, n)
fvec_cumdiff = _yael.fvec_cumdiff

def ivec_cumdiff(v, n):
    return _yael.ivec_cumdiff(v, n)
ivec_cumdiff = _yael.ivec_cumdiff

def fvec_product(v, n):
    return _yael.fvec_product(v, n)
fvec_product = _yael.fvec_product

def ivec_product(v, n):
    return _yael.ivec_product(v, n)
ivec_product = _yael.ivec_product

def fvec_sum_sqr(v, n):
    return _yael.fvec_sum_sqr(v, n)
fvec_sum_sqr = _yael.fvec_sum_sqr

def ivec_sum_sqr(v, n):
    return _yael.ivec_sum_sqr(v, n)
ivec_sum_sqr = _yael.ivec_sum_sqr

def fvec_mean(v, n):
    return _yael.fvec_mean(v, n)
fvec_mean = _yael.fvec_mean

def ivec_mean(v, n):
    return _yael.ivec_mean(v, n)
ivec_mean = _yael.ivec_mean

def fvec_norm(v, n, norm):
    return _yael.fvec_norm(v, n, norm)
fvec_norm = _yael.fvec_norm

def fvec_norm2sqr(v, n):
    return _yael.fvec_norm2sqr(v, n)
fvec_norm2sqr = _yael.fvec_norm2sqr

def fvec_nz(v, n):
    return _yael.fvec_nz(v, n)
fvec_nz = _yael.fvec_nz

def ivec_nz(v, n):
    return _yael.ivec_nz(v, n)
ivec_nz = _yael.ivec_nz

def fvec_find(v, n, nzpos_out):
    return _yael.fvec_find(v, n, nzpos_out)
fvec_find = _yael.fvec_find

def ivec_find(v, n, nzpos_out):
    return _yael.ivec_find(v, n, nzpos_out)
ivec_find = _yael.ivec_find

def ivec_shuffle(v, n):
    return _yael.ivec_shuffle(v, n)
ivec_shuffle = _yael.ivec_shuffle

def fvec_entropy(pmf, n):
    return _yael.fvec_entropy(pmf, n)
fvec_entropy = _yael.fvec_entropy

def binary_entropy(p):
    return _yael.binary_entropy(p)
binary_entropy = _yael.binary_entropy

def ivec_unbalanced_factor(hist, n):
    return _yael.ivec_unbalanced_factor(hist, n)
ivec_unbalanced_factor = _yael.ivec_unbalanced_factor

def ivec_distance_hamming(v1, v2, n):
    return _yael.ivec_distance_hamming(v1, v2, n)
ivec_distance_hamming = _yael.ivec_distance_hamming

def fvec_distance_L2(v1, v2, n):
    return _yael.fvec_distance_L2(v1, v2, n)
fvec_distance_L2 = _yael.fvec_distance_L2

def fvec_distance_L1(v1, v2, n):
    return _yael.fvec_distance_L1(v1, v2, n)
fvec_distance_L1 = _yael.fvec_distance_L1

def fvec_distance_L2sqr(v1, v2, n):
    return _yael.fvec_distance_L2sqr(v1, v2, n)
fvec_distance_L2sqr = _yael.fvec_distance_L2sqr

def fvec_inner_product(v1, v2, n):
    return _yael.fvec_inner_product(v1, v2, n)
fvec_inner_product = _yael.fvec_inner_product

def fvec_to_spfvec(v, n):
    return _yael.fvec_to_spfvec(v, n)
fvec_to_spfvec = _yael.fvec_to_spfvec

def ivec_to_spivec(v, n, idx_out, v_out):
    return _yael.ivec_to_spivec(v, n, idx_out, v_out)
ivec_to_spivec = _yael.ivec_to_spivec

def spfvec_to_fvec(idx, v, nz, n):
    return _yael.spfvec_to_fvec(idx, v, nz, n)
spfvec_to_fvec = _yael.spfvec_to_fvec

def spivec_to_ivec(idx, v, nz, n):
    return _yael.spivec_to_ivec(idx, v, nz, n)
spivec_to_ivec = _yael.spivec_to_ivec

def spfvec_inner_product(idx1, val1, nz1, idx2, val2, nz2):
    return _yael.spfvec_inner_product(idx1, val1, nz1, idx2, val2, nz2)
spfvec_inner_product = _yael.spfvec_inner_product

def ivec_accumulate_slices(v, sl, n):
    return _yael.ivec_accumulate_slices(v, sl, n)
ivec_accumulate_slices = _yael.ivec_accumulate_slices

def fvec_map(src, map, n, dest):
    return _yael.fvec_map(src, map, n, dest)
fvec_map = _yael.fvec_map

def ivec_map(src, map, n, dest):
    return _yael.ivec_map(src, map, n, dest)
ivec_map = _yael.ivec_map

def fvec_imap(src, imap, n, dest):
    return _yael.fvec_imap(src, imap, n, dest)
fvec_imap = _yael.fvec_imap

def fvec_splat_add(a, n, assign, accu):
    return _yael.fvec_splat_add(a, n, assign, accu)
fvec_splat_add = _yael.fvec_splat_add

def fvec_isplat_add(a, n, assign, accu):
    return _yael.fvec_isplat_add(a, n, assign, accu)
fvec_isplat_add = _yael.fvec_isplat_add

def ivec_repeat_with_inc(a, n, nrepeat, inc):
    return _yael.ivec_repeat_with_inc(a, n, nrepeat, inc)
ivec_repeat_with_inc = _yael.ivec_repeat_with_inc

def fvec_cpy_subvectors(v, idx, d, nout, vout):
    return _yael.fvec_cpy_subvectors(v, idx, d, nout, vout)
fvec_cpy_subvectors = _yael.fvec_cpy_subvectors

def b2fvec_cpy_subvectors(v, idx, d, nout, vout):
    return _yael.b2fvec_cpy_subvectors(v, idx, d, nout, vout)
b2fvec_cpy_subvectors = _yael.b2fvec_cpy_subvectors

def ivec_to_fvec(v, f, n):
    return _yael.ivec_to_fvec(v, f, n)
ivec_to_fvec = _yael.ivec_to_fvec

def fmat_new(nrow, ncol):
    return _yael.fmat_new(nrow, ncol)
fmat_new = _yael.fmat_new

def fmat_new_0(nrow, ncol):
    return _yael.fmat_new_0(nrow, ncol)
fmat_new_0 = _yael.fmat_new_0

def fmat_mul_full(left, right, m, n, k, transp, result):
    return _yael.fmat_mul_full(left, right, m, n, k, transp, result)
fmat_mul_full = _yael.fmat_mul_full

def fmat_mul_full_nonpacked(left, right, m, n, k, transp, ld_left, ld_right, result, ld_result):
    return _yael.fmat_mul_full_nonpacked(left, right, m, n, k, transp, ld_left, ld_right, result, ld_result)
fmat_mul_full_nonpacked = _yael.fmat_mul_full_nonpacked

def fmat_new_mul_full(left, right, m, n, k, transp):
    return _yael.fmat_new_mul_full(left, right, m, n, k, transp)
fmat_new_mul_full = _yael.fmat_new_mul_full

def fmat_mul(left, right, m, n, k, mout):
    return _yael.fmat_mul(left, right, m, n, k, mout)
fmat_mul = _yael.fmat_mul

def fmat_mul_tl(left, right, m, n, k, mout):
    return _yael.fmat_mul_tl(left, right, m, n, k, mout)
fmat_mul_tl = _yael.fmat_mul_tl

def fmat_mul_tr(left, right, m, n, k, mout):
    return _yael.fmat_mul_tr(left, right, m, n, k, mout)
fmat_mul_tr = _yael.fmat_mul_tr

def fmat_mul_tlr(left, right, m, n, k, mout):
    return _yael.fmat_mul_tlr(left, right, m, n, k, mout)
fmat_mul_tlr = _yael.fmat_mul_tlr

def fmat_new_mul(left, right, m, n, k):
    return _yael.fmat_new_mul(left, right, m, n, k)
fmat_new_mul = _yael.fmat_new_mul

def fmat_new_mul_tl(left, right, m, n, k):
    return _yael.fmat_new_mul_tl(left, right, m, n, k)
fmat_new_mul_tl = _yael.fmat_new_mul_tl

def fmat_new_mul_tr(left, right, m, n, k):
    return _yael.fmat_new_mul_tr(left, right, m, n, k)
fmat_new_mul_tr = _yael.fmat_new_mul_tr

def fmat_new_mul_tlr(left, right, m, n, k):
    return _yael.fmat_new_mul_tlr(left, right, m, n, k)
fmat_new_mul_tlr = _yael.fmat_new_mul_tlr

def fmat_solve_ls_t(m, n, a, b, x):
    return _yael.fmat_solve_ls_t(m, n, a, b, x)
fmat_solve_ls_t = _yael.fmat_solve_ls_t

def fmat_print(a, nrow, ncol):
    return _yael.fmat_print(a, nrow, ncol)
fmat_print = _yael.fmat_print

def fmat_print_tranposed(a, nrow, ncol):
    return _yael.fmat_print_tranposed(a, nrow, ncol)
fmat_print_tranposed = _yael.fmat_print_tranposed

def fmat_get_submatrix(a, nrow, nrow_out, ncol):
    return _yael.fmat_get_submatrix(a, nrow, nrow_out, ncol)
fmat_get_submatrix = _yael.fmat_get_submatrix

def imat_get_submatrix(a, nrow, nrow_out, ncol):
    return _yael.imat_get_submatrix(a, nrow, nrow_out, ncol)
imat_get_submatrix = _yael.imat_get_submatrix

def fmat_new_get_columns(a, nrow, ncolout, cols):
    return _yael.fmat_new_get_columns(a, nrow, ncolout, cols)
fmat_new_get_columns = _yael.fmat_new_get_columns

def fmat_shuffle_columns(a, nrow, ncol):
    return _yael.fmat_shuffle_columns(a, nrow, ncol)
fmat_shuffle_columns = _yael.fmat_shuffle_columns

def fmat_new_get_row(a, nrow, ncol, row):
    return _yael.fmat_new_get_row(a, nrow, ncol, row)
fmat_new_get_row = _yael.fmat_new_get_row

def fmat_new_get_rows(a, d, n, nrowout, rows):
    return _yael.fmat_new_get_rows(a, d, n, nrowout, rows)
fmat_new_get_rows = _yael.fmat_new_get_rows

def fmat_sum_columns(a, nrow, ncol, sums):
    return _yael.fmat_sum_columns(a, nrow, ncol, sums)
fmat_sum_columns = _yael.fmat_sum_columns

def fmat_new_sum_columns(a, nrow, ncol):
    return _yael.fmat_new_sum_columns(a, nrow, ncol)
fmat_new_sum_columns = _yael.fmat_new_sum_columns

def fmat_sum_rows(a, nrow, ncol, sums):
    return _yael.fmat_sum_rows(a, nrow, ncol, sums)
fmat_sum_rows = _yael.fmat_sum_rows

def fmat_new_sum_rows(a, nrow, ncol):
    return _yael.fmat_new_sum_rows(a, nrow, ncol)
fmat_new_sum_rows = _yael.fmat_new_sum_rows

def fmat_new_vstack(a, da, b, db, n):
    return _yael.fmat_new_vstack(a, da, b, db, n)
fmat_new_vstack = _yael.fmat_new_vstack

def fmat_new_transp(a, ncol, nrow):
    return _yael.fmat_new_transp(a, ncol, nrow)
fmat_new_transp = _yael.fmat_new_transp

def fmat_inplace_transp(a, ncol, nrow):
    return _yael.fmat_inplace_transp(a, ncol, nrow)
fmat_inplace_transp = _yael.fmat_inplace_transp

def fmat_splat_separable(a, nrow, ncol, row_assign, col_assign, k, accu):
    return _yael.fmat_splat_separable(a, nrow, ncol, row_assign, col_assign, k, accu)
fmat_splat_separable = _yael.fmat_splat_separable

def imat_joint_histogram(n, k, row_assign, col_assign):
    return _yael.imat_joint_histogram(n, k, row_assign, col_assign)
imat_joint_histogram = _yael.imat_joint_histogram

def fmat_new_rand_gauss(nrow, ncol):
    return _yael.fmat_new_rand_gauss(nrow, ncol)
fmat_new_rand_gauss = _yael.fmat_new_rand_gauss

def random_orthogonal_basis(d):
    return _yael.random_orthogonal_basis(d)
random_orthogonal_basis = _yael.random_orthogonal_basis

def hadamard(d):
    return _yael.hadamard(d)
hadamard = _yael.hadamard

def fmat_center_columns(d, n, v):
    return _yael.fmat_center_columns(d, n, v)
fmat_center_columns = _yael.fmat_center_columns

def fmat_subtract_from_columns(d, n, m, avg):
    return _yael.fmat_subtract_from_columns(d, n, m, avg)
fmat_subtract_from_columns = _yael.fmat_subtract_from_columns

def fmat_add_to_columns(d, n, m, avg):
    return _yael.fmat_add_to_columns(d, n, m, avg)
fmat_add_to_columns = _yael.fmat_add_to_columns

def fmat_rev_subtract_from_columns(d, n, m, avg):
    return _yael.fmat_rev_subtract_from_columns(d, n, m, avg)
fmat_rev_subtract_from_columns = _yael.fmat_rev_subtract_from_columns

def fmat_new_covariance(d, n, v, avg, assume_centered):
    return _yael.fmat_new_covariance(d, n, v, avg, assume_centered)
fmat_new_covariance = _yael.fmat_new_covariance

def fmat_new_pca(d, n, v, singvals):
    return _yael.fmat_new_pca(d, n, v, singvals)
fmat_new_pca = _yael.fmat_new_pca

def fmat_new_pca_part(d, n, nev, v, singvals):
    return _yael.fmat_new_pca_part(d, n, nev, v, singvals)
fmat_new_pca_part = _yael.fmat_new_pca_part

def fmat_svd_partial(d, n, ns, a, singvals, u, v):
    return _yael.fmat_svd_partial(d, n, ns, a, singvals, u, v)
fmat_svd_partial = _yael.fmat_svd_partial

def fmat_svd_partial_full(n, m, nev, a, a_transposed, s, vout, uout, nt):
    return _yael.fmat_svd_partial_full(n, m, nev, a, a_transposed, s, vout, uout, nt)
fmat_svd_partial_full = _yael.fmat_svd_partial_full

def fmat_new_pca_from_covariance(d, cov, singvals):
    return _yael.fmat_new_pca_from_covariance(d, cov, singvals)
fmat_new_pca_from_covariance = _yael.fmat_new_pca_from_covariance
class pca_online_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pca_online_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pca_online_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _yael.pca_online_s_n_set
    __swig_getmethods__["n"] = _yael.pca_online_s_n_get
    if _newclass:
        n = _swig_property(_yael.pca_online_s_n_get, _yael.pca_online_s_n_set)
    __swig_setmethods__["d"] = _yael.pca_online_s_d_set
    __swig_getmethods__["d"] = _yael.pca_online_s_d_get
    if _newclass:
        d = _swig_property(_yael.pca_online_s_d_get, _yael.pca_online_s_d_set)
    __swig_setmethods__["mu"] = _yael.pca_online_s_mu_set
    __swig_getmethods__["mu"] = _yael.pca_online_s_mu_get
    if _newclass:
        mu = _swig_property(_yael.pca_online_s_mu_get, _yael.pca_online_s_mu_set)
    __swig_setmethods__["cov"] = _yael.pca_online_s_cov_set
    __swig_getmethods__["cov"] = _yael.pca_online_s_cov_get
    if _newclass:
        cov = _swig_property(_yael.pca_online_s_cov_get, _yael.pca_online_s_cov_set)
    __swig_setmethods__["eigvec"] = _yael.pca_online_s_eigvec_set
    __swig_getmethods__["eigvec"] = _yael.pca_online_s_eigvec_get
    if _newclass:
        eigvec = _swig_property(_yael.pca_online_s_eigvec_get, _yael.pca_online_s_eigvec_set)
    __swig_setmethods__["eigval"] = _yael.pca_online_s_eigval_set
    __swig_getmethods__["eigval"] = _yael.pca_online_s_eigval_get
    if _newclass:
        eigval = _swig_property(_yael.pca_online_s_eigval_get, _yael.pca_online_s_eigval_set)

    def __init__(self):
        this = _yael.new_pca_online_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_pca_online_s
    __del__ = lambda self: None
pca_online_s_swigregister = _yael.pca_online_s_swigregister
pca_online_s_swigregister(pca_online_s)


def pca_online_new(d):
    return _yael.pca_online_new(d)
pca_online_new = _yael.pca_online_new

def pca_online_delete(pca):
    return _yael.pca_online_delete(pca)
pca_online_delete = _yael.pca_online_delete

def pca_online_accu(pca, v, n):
    return _yael.pca_online_accu(pca, v, n)
pca_online_accu = _yael.pca_online_accu

def pca_online_complete(pca):
    return _yael.pca_online_complete(pca)
pca_online_complete = _yael.pca_online_complete

def pca_online_project(pca, v, vo, d, n, dout):
    return _yael.pca_online_project(pca, v, vo, d, n, dout)
pca_online_project = _yael.pca_online_project

def eigs_sym(d, m, eigval, eigvec):
    return _yael.eigs_sym(d, m, eigval, eigvec)
eigs_sym = _yael.eigs_sym

def geigs_sym(d, a, b, eigval, eigvec):
    return _yael.geigs_sym(d, a, b, eigval, eigvec)
geigs_sym = _yael.geigs_sym

def eigs_reorder(d, eigval, eigvec, criterion):
    return _yael.eigs_reorder(d, eigval, eigvec, criterion)
eigs_reorder = _yael.eigs_reorder

def eigs_sym_part(d, m, nev, eigval, eigvec):
    return _yael.eigs_sym_part(d, m, nev, eigval, eigvec)
eigs_sym_part = _yael.eigs_sym_part

def arpack_eigs_begin(n, nev):
    return _yael.arpack_eigs_begin(n, nev)
arpack_eigs_begin = _yael.arpack_eigs_begin

def arpack_eigs_step(arg1):
    return _yael.arpack_eigs_step(arg1)
arpack_eigs_step = _yael.arpack_eigs_step

def arpack_eigs_end(arg1, sout, vout):
    return _yael.arpack_eigs_end(arg1, sout, vout)
arpack_eigs_end = _yael.arpack_eigs_end
class gmm_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gmm_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gmm_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _yael.gmm_t_d_set
    __swig_getmethods__["d"] = _yael.gmm_t_d_get
    if _newclass:
        d = _swig_property(_yael.gmm_t_d_get, _yael.gmm_t_d_set)
    __swig_setmethods__["k"] = _yael.gmm_t_k_set
    __swig_getmethods__["k"] = _yael.gmm_t_k_get
    if _newclass:
        k = _swig_property(_yael.gmm_t_k_get, _yael.gmm_t_k_set)
    __swig_setmethods__["w"] = _yael.gmm_t_w_set
    __swig_getmethods__["w"] = _yael.gmm_t_w_get
    if _newclass:
        w = _swig_property(_yael.gmm_t_w_get, _yael.gmm_t_w_set)
    __swig_setmethods__["mu"] = _yael.gmm_t_mu_set
    __swig_getmethods__["mu"] = _yael.gmm_t_mu_get
    if _newclass:
        mu = _swig_property(_yael.gmm_t_mu_get, _yael.gmm_t_mu_set)
    __swig_setmethods__["sigma"] = _yael.gmm_t_sigma_set
    __swig_getmethods__["sigma"] = _yael.gmm_t_sigma_get
    if _newclass:
        sigma = _swig_property(_yael.gmm_t_sigma_get, _yael.gmm_t_sigma_set)

    def __init__(self):
        this = _yael.new_gmm_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_gmm_t
    __del__ = lambda self: None
gmm_t_swigregister = _yael.gmm_t_swigregister
gmm_t_swigregister(gmm_t)

GMM_FLAGS_W = _yael.GMM_FLAGS_W
GMM_FLAGS_NO_NORM = _yael.GMM_FLAGS_NO_NORM
GMM_FLAGS_1SIGMA = _yael.GMM_FLAGS_1SIGMA
GMM_FLAGS_PURE_KMEANS = _yael.GMM_FLAGS_PURE_KMEANS
GMM_FLAGS_SIGMA = _yael.GMM_FLAGS_SIGMA
GMM_FLAGS_MU = _yael.GMM_FLAGS_MU

def gmm_learn(d, n, k, niter, v, nt, seed, nredo, flags):
    return _yael.gmm_learn(d, n, k, niter, v, nt, seed, nredo, flags)
gmm_learn = _yael.gmm_learn

def gmm_print(g):
    return _yael.gmm_print(g)
gmm_print = _yael.gmm_print

def gmm_delete(g):
    return _yael.gmm_delete(g)
gmm_delete = _yael.gmm_delete

def gmm_compute_p(n, v, g, p, flags):
    return _yael.gmm_compute_p(n, v, g, p, flags)
gmm_compute_p = _yael.gmm_compute_p

def gmm_fisher_save_soft_assgn(n, v, g, flags, fisher_vector_out, word_total_soft_assignment):
    return _yael.gmm_fisher_save_soft_assgn(n, v, g, flags, fisher_vector_out, word_total_soft_assignment)
gmm_fisher_save_soft_assgn = _yael.gmm_fisher_save_soft_assgn

def gmm_fisher(n, v, g, flags, fisher_vector_out):
    return _yael.gmm_fisher(n, v, g, flags, fisher_vector_out)
gmm_fisher = _yael.gmm_fisher

def gmm_fisher_sizeof(g, flags):
    return _yael.gmm_fisher_sizeof(g, flags)
gmm_fisher_sizeof = _yael.gmm_fisher_sizeof

def gmm_fisher_point_indexed(n, v, g, flags, pi_assgns, pi_assgn_weights, pi_residuals):
    return _yael.gmm_fisher_point_indexed(n, v, g, flags, pi_assgns, pi_assgn_weights, pi_residuals)
gmm_fisher_point_indexed = _yael.gmm_fisher_point_indexed

def gmm_write(g, f):
    return _yael.gmm_write(g, f)
gmm_write = _yael.gmm_write

def gmm_read(f):
    return _yael.gmm_read(f)
gmm_read = _yael.gmm_read

def gmm_compute_p_thread(n, v, g, p, flags, n_thread):
    return _yael.gmm_compute_p_thread(n, v, g, p, flags, n_thread)
gmm_compute_p_thread = _yael.gmm_compute_p_thread

def vlad_compute(k, d, centroids, n, v, desc):
    return _yael.vlad_compute(k, d, centroids, n, v, desc)
vlad_compute = _yael.vlad_compute

def vlad_compute_weighted(k, d, centroids, n, v, weights, desc):
    return _yael.vlad_compute_weighted(k, d, centroids, n, v, weights, desc)
vlad_compute_weighted = _yael.vlad_compute_weighted

def vlad_compute_subsets(k, d, centroids, n, v, n_subset, subset_indexes, subset_ends, desc):
    return _yael.vlad_compute_subsets(k, d, centroids, n, v, n_subset, subset_indexes, subset_ends, desc)
vlad_compute_subsets = _yael.vlad_compute_subsets

def bof_compute(k, d, centroids, n, v, desc):
    return _yael.bof_compute(k, d, centroids, n, v, desc)
bof_compute = _yael.bof_compute

def bof_compute_subsets(k, d, centroids, n, v, n_subset, subset_indexes, subset_ends, desc):
    return _yael.bof_compute_subsets(k, d, centroids, n, v, n_subset, subset_indexes, subset_ends, desc)
bof_compute_subsets = _yael.bof_compute_subsets
class nnlist_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nnlist_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nnlist_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _yael.nnlist_s_n_set
    __swig_getmethods__["n"] = _yael.nnlist_s_n_get
    if _newclass:
        n = _swig_property(_yael.nnlist_s_n_get, _yael.nnlist_s_n_set)
    __swig_setmethods__["k"] = _yael.nnlist_s_k_set
    __swig_getmethods__["k"] = _yael.nnlist_s_k_get
    if _newclass:
        k = _swig_property(_yael.nnlist_s_k_get, _yael.nnlist_s_k_set)
    __swig_setmethods__["idx"] = _yael.nnlist_s_idx_set
    __swig_getmethods__["idx"] = _yael.nnlist_s_idx_get
    if _newclass:
        idx = _swig_property(_yael.nnlist_s_idx_get, _yael.nnlist_s_idx_set)
    __swig_setmethods__["dis"] = _yael.nnlist_s_dis_set
    __swig_getmethods__["dis"] = _yael.nnlist_s_dis_get
    if _newclass:
        dis = _swig_property(_yael.nnlist_s_dis_get, _yael.nnlist_s_dis_set)

    def __init__(self):
        this = _yael.new_nnlist_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_nnlist_s
    __del__ = lambda self: None
nnlist_s_swigregister = _yael.nnlist_s_swigregister
nnlist_s_swigregister(nnlist_s)


def nnlist_new(n, k):
    return _yael.nnlist_new(n, k)
nnlist_new = _yael.nnlist_new

def nnlist_new_noalloc(n, k):
    return _yael.nnlist_new_noalloc(n, k)
nnlist_new_noalloc = _yael.nnlist_new_noalloc

def nnlist_delete(l):
    return _yael.nnlist_delete(l)
nnlist_delete = _yael.nnlist_delete

def nnlist_addn(l, lno, n, idx, dis):
    return _yael.nnlist_addn(l, lno, n, idx, dis)
nnlist_addn = _yael.nnlist_addn
KMLSH_NT = _yael.KMLSH_NT
KMLSH_QUIET = _yael.KMLSH_QUIET
KMLSH_WRITE_INTER_NHASH = _yael.KMLSH_WRITE_INTER_NHASH
KMLSH_BLOCK_SIZE = _yael.KMLSH_BLOCK_SIZE
KMLSH_NB_ITER_MAX = _yael.KMLSH_NB_ITER_MAX
KMLSH_VECTYPE_FVEC = _yael.KMLSH_VECTYPE_FVEC
KMLSH_VECTYPE_BVEC = _yael.KMLSH_VECTYPE_BVEC
class kmlsh_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kmlsh_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kmlsh_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nhash"] = _yael.kmlsh_s_nhash_set
    __swig_getmethods__["nhash"] = _yael.kmlsh_s_nhash_get
    if _newclass:
        nhash = _swig_property(_yael.kmlsh_s_nhash_get, _yael.kmlsh_s_nhash_set)
    __swig_setmethods__["d"] = _yael.kmlsh_s_d_set
    __swig_getmethods__["d"] = _yael.kmlsh_s_d_get
    if _newclass:
        d = _swig_property(_yael.kmlsh_s_d_get, _yael.kmlsh_s_d_set)
    __swig_setmethods__["nclust"] = _yael.kmlsh_s_nclust_set
    __swig_getmethods__["nclust"] = _yael.kmlsh_s_nclust_get
    if _newclass:
        nclust = _swig_property(_yael.kmlsh_s_nclust_get, _yael.kmlsh_s_nclust_set)
    __swig_setmethods__["centroids"] = _yael.kmlsh_s_centroids_set
    __swig_getmethods__["centroids"] = _yael.kmlsh_s_centroids_get
    if _newclass:
        centroids = _swig_property(_yael.kmlsh_s_centroids_get, _yael.kmlsh_s_centroids_set)

    def __init__(self):
        this = _yael.new_kmlsh_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_kmlsh_s
    __del__ = lambda self: None
kmlsh_s_swigregister = _yael.kmlsh_s_swigregister
kmlsh_s_swigregister(kmlsh_s)

class kmlsh_idx_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kmlsh_idx_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kmlsh_idx_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nhash"] = _yael.kmlsh_idx_s_nhash_set
    __swig_getmethods__["nhash"] = _yael.kmlsh_idx_s_nhash_get
    if _newclass:
        nhash = _swig_property(_yael.kmlsh_idx_s_nhash_get, _yael.kmlsh_idx_s_nhash_set)
    __swig_setmethods__["n"] = _yael.kmlsh_idx_s_n_set
    __swig_getmethods__["n"] = _yael.kmlsh_idx_s_n_get
    if _newclass:
        n = _swig_property(_yael.kmlsh_idx_s_n_get, _yael.kmlsh_idx_s_n_set)
    __swig_setmethods__["nclust"] = _yael.kmlsh_idx_s_nclust_set
    __swig_getmethods__["nclust"] = _yael.kmlsh_idx_s_nclust_get
    if _newclass:
        nclust = _swig_property(_yael.kmlsh_idx_s_nclust_get, _yael.kmlsh_idx_s_nclust_set)
    __swig_setmethods__["perm"] = _yael.kmlsh_idx_s_perm_set
    __swig_getmethods__["perm"] = _yael.kmlsh_idx_s_perm_get
    if _newclass:
        perm = _swig_property(_yael.kmlsh_idx_s_perm_get, _yael.kmlsh_idx_s_perm_set)
    __swig_setmethods__["boundaries"] = _yael.kmlsh_idx_s_boundaries_set
    __swig_getmethods__["boundaries"] = _yael.kmlsh_idx_s_boundaries_get
    if _newclass:
        boundaries = _swig_property(_yael.kmlsh_idx_s_boundaries_get, _yael.kmlsh_idx_s_boundaries_set)

    def __init__(self):
        this = _yael.new_kmlsh_idx_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_kmlsh_idx_s
    __del__ = lambda self: None
kmlsh_idx_s_swigregister = _yael.kmlsh_idx_s_swigregister
kmlsh_idx_s_swigregister(kmlsh_idx_s)


def kmlsh_new(nhash, nclust, d):
    return _yael.kmlsh_new(nhash, nclust, d)
kmlsh_new = _yael.kmlsh_new

def kmlsh_delete(lsh):
    return _yael.kmlsh_delete(lsh)
kmlsh_delete = _yael.kmlsh_delete

def kmlsh_learn_xvec(lsh, n, nlearn, v, flags, vec_type):
    return _yael.kmlsh_learn_xvec(lsh, n, nlearn, v, flags, vec_type)
kmlsh_learn_xvec = _yael.kmlsh_learn_xvec

def kmlsh_new_learn_bvec(nhash, nclust, d, n, nlearn, v, flags):
    return _yael.kmlsh_new_learn_bvec(nhash, nclust, d, n, nlearn, v, flags)
kmlsh_new_learn_bvec = _yael.kmlsh_new_learn_bvec

def kmlsh_new_learn_fvec(nhash, nclust, d, n, nlearn, v, flags):
    return _yael.kmlsh_new_learn_fvec(nhash, nclust, d, n, nlearn, v, flags)
kmlsh_new_learn_fvec = _yael.kmlsh_new_learn_fvec

def kmlsh_match_xvec(lsh, lshidx_b, vb, nb, lshidx_q, vq, nq, k, nt, vec_type):
    return _yael.kmlsh_match_xvec(lsh, lshidx_b, vb, nb, lshidx_q, vq, nq, k, nt, vec_type)
kmlsh_match_xvec = _yael.kmlsh_match_xvec

def kmlsh_match_bvec(lsh, lshidx_b, vb, nb, lshidx_q, vq, nq, k, nt):
    return _yael.kmlsh_match_bvec(lsh, lshidx_b, vb, nb, lshidx_q, vq, nq, k, nt)
kmlsh_match_bvec = _yael.kmlsh_match_bvec

def kmlsh_match_fvec(lsh, lshidx_b, vb, nb, lshidx_q, vq, nq, k, nt):
    return _yael.kmlsh_match_fvec(lsh, lshidx_b, vb, nb, lshidx_q, vq, nq, k, nt)
kmlsh_match_fvec = _yael.kmlsh_match_fvec

def kmlsh_ann_xvec(vb, nb, vq, nq, d, k, nhash, flags, vec_type):
    return _yael.kmlsh_ann_xvec(vb, nb, vq, nq, d, k, nhash, flags, vec_type)
kmlsh_ann_xvec = _yael.kmlsh_ann_xvec

def kmlsh_ann_bvec(vb, nb, vq, nq, d, k, nhash, flags):
    return _yael.kmlsh_ann_bvec(vb, nb, vq, nq, d, k, nhash, flags)
kmlsh_ann_bvec = _yael.kmlsh_ann_bvec

def kmlsh_ann_fvec(vb, nb, vq, nq, d, k, nhash, flags):
    return _yael.kmlsh_ann_fvec(vb, nb, vq, nq, d, k, nhash, flags)
kmlsh_ann_fvec = _yael.kmlsh_ann_fvec

def kmlsh_idx_new(lsh, n):
    return _yael.kmlsh_idx_new(lsh, n)
kmlsh_idx_new = _yael.kmlsh_idx_new

def kmlsh_idx_delete(lshidx):
    return _yael.kmlsh_idx_delete(lshidx)
kmlsh_idx_delete = _yael.kmlsh_idx_delete

def kmlsh_idx_new_compile_xvec(lsh, v, n, flags, vec_type):
    return _yael.kmlsh_idx_new_compile_xvec(lsh, v, n, flags, vec_type)
kmlsh_idx_new_compile_xvec = _yael.kmlsh_idx_new_compile_xvec

def kmlsh_idx_new_compile_bvec(lsh, v, n, flags):
    return _yael.kmlsh_idx_new_compile_bvec(lsh, v, n, flags)
kmlsh_idx_new_compile_bvec = _yael.kmlsh_idx_new_compile_bvec

def kmlsh_idx_new_compile_fvec(lsh, v, n, flags):
    return _yael.kmlsh_idx_new_compile_fvec(lsh, v, n, flags)
kmlsh_idx_new_compile_fvec = _yael.kmlsh_idx_new_compile_fvec

def kmlsh_idx_get_nvec(lshidx, h, c):
    return _yael.kmlsh_idx_get_nvec(lshidx, h, c)
kmlsh_idx_get_nvec = _yael.kmlsh_idx_get_nvec

def kmlsh_idx_get_maxincell(lshidx, h):
    return _yael.kmlsh_idx_get_maxincell(lshidx, h)
kmlsh_idx_get_maxincell = _yael.kmlsh_idx_get_maxincell

def kmlsh_idx_get_vecids(lshidx, h, c):
    return _yael.kmlsh_idx_get_vecids(lshidx, h, c)
kmlsh_idx_get_vecids = _yael.kmlsh_idx_get_vecids

def kmeans_cohash_xvec(lsh, h, v, n, perm, boundaries, flags, vec_type):
    return _yael.kmeans_cohash_xvec(lsh, h, v, n, perm, boundaries, flags, vec_type)
kmeans_cohash_xvec = _yael.kmeans_cohash_xvec

def kmeans_cohash_bvec(lsh, h, v, n, perm, boundaries, flags):
    return _yael.kmeans_cohash_bvec(lsh, h, v, n, perm, boundaries, flags)
kmeans_cohash_bvec = _yael.kmeans_cohash_bvec

def kmeans_cohash_fvec(lsh, h, v, n, perm, boundaries, flags):
    return _yael.kmeans_cohash_fvec(lsh, h, v, n, perm, boundaries, flags)
kmeans_cohash_fvec = _yael.kmeans_cohash_fvec

def kmlsh_write(filename, lsh):
    return _yael.kmlsh_write(filename, lsh)
kmlsh_write = _yael.kmlsh_write

def kmlsh_read(filename, lsh):
    return _yael.kmlsh_read(filename, lsh)
kmlsh_read = _yael.kmlsh_read

def kmlsh_idx_write(filename, lshidx):
    return _yael.kmlsh_idx_write(filename, lshidx)
kmlsh_idx_write = _yael.kmlsh_idx_write

def kmlsh_idx_read(filename, lshidx):
    return _yael.kmlsh_idx_read(filename, lshidx)
kmlsh_idx_read = _yael.kmlsh_idx_read

def free(arg1):
    return _yael.free(arg1)
free = _yael.free

def count_cpu():
    return _yael.count_cpu()
count_cpu = _yael.count_cpu

def log2(x):
    return _yael.log2(x)
log2 = _yael.log2

def memalign(ignored, nbytes):
    return _yael.memalign(ignored, nbytes)
memalign = _yael.memalign
class malloc_stats_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, malloc_stats_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, malloc_stats_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_alloc"] = _yael.malloc_stats_t_n_alloc_set
    __swig_getmethods__["n_alloc"] = _yael.malloc_stats_t_n_alloc_get
    if _newclass:
        n_alloc = _swig_property(_yael.malloc_stats_t_n_alloc_get, _yael.malloc_stats_t_n_alloc_set)
    __swig_setmethods__["n_free"] = _yael.malloc_stats_t_n_free_set
    __swig_getmethods__["n_free"] = _yael.malloc_stats_t_n_free_get
    if _newclass:
        n_free = _swig_property(_yael.malloc_stats_t_n_free_get, _yael.malloc_stats_t_n_free_set)
    __swig_setmethods__["n_realloc"] = _yael.malloc_stats_t_n_realloc_set
    __swig_getmethods__["n_realloc"] = _yael.malloc_stats_t_n_realloc_get
    if _newclass:
        n_realloc = _swig_property(_yael.malloc_stats_t_n_realloc_get, _yael.malloc_stats_t_n_realloc_set)
    __swig_setmethods__["delta_alloc"] = _yael.malloc_stats_t_delta_alloc_set
    __swig_getmethods__["delta_alloc"] = _yael.malloc_stats_t_delta_alloc_get
    if _newclass:
        delta_alloc = _swig_property(_yael.malloc_stats_t_delta_alloc_get, _yael.malloc_stats_t_delta_alloc_set)
    __swig_setmethods__["max_alloc"] = _yael.malloc_stats_t_max_alloc_set
    __swig_getmethods__["max_alloc"] = _yael.malloc_stats_t_max_alloc_get
    if _newclass:
        max_alloc = _swig_property(_yael.malloc_stats_t_max_alloc_get, _yael.malloc_stats_t_max_alloc_set)
    __swig_setmethods__["n_untracked_frees"] = _yael.malloc_stats_t_n_untracked_frees_set
    __swig_getmethods__["n_untracked_frees"] = _yael.malloc_stats_t_n_untracked_frees_get
    if _newclass:
        n_untracked_frees = _swig_property(_yael.malloc_stats_t_n_untracked_frees_get, _yael.malloc_stats_t_n_untracked_frees_set)

    def __init__(self):
        this = _yael.new_malloc_stats_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yael.delete_malloc_stats_t
    __del__ = lambda self: None
malloc_stats_t_swigregister = _yael.malloc_stats_t_swigregister
malloc_stats_t_swigregister(malloc_stats_t)


def malloc_stats_begin():
    return _yael.malloc_stats_begin()
malloc_stats_begin = _yael.malloc_stats_begin

def malloc_stats_end():
    return _yael.malloc_stats_end()
malloc_stats_end = _yael.malloc_stats_end

def getmillisecs():
    return _yael.getmillisecs()
getmillisecs = _yael.getmillisecs

def compute_tasks(n, nthread, task_fun, task_arg):
    return _yael.compute_tasks(n, nthread, task_fun, task_arg)
compute_tasks = _yael.compute_tasks

def common_srandom(seed):
    return _yael.common_srandom(seed)
common_srandom = _yael.common_srandom
# This file is compatible with both classic and new-style classes.


