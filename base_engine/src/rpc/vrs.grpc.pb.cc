// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vrs.proto

#include "vrs.pb.h"
#include "vrs.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vrs {
namespace rpc {

static const char* VrsRpc_method_names[] = {
  "/vrs.rpc.VrsRpc/Search",
  "/vrs.rpc.VrsRpc/ProcessVideo",
  "/vrs.rpc.VrsRpc/Merge",
};

std::unique_ptr< VrsRpc::Stub> VrsRpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VrsRpc::Stub> stub(new VrsRpc::Stub(channel));
  return stub;
}

VrsRpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Search_(VrsRpc_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ProcessVideo_(VrsRpc_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Merge_(VrsRpc_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::vrs::rpc::SearchResult>* VrsRpc::Stub::SearchRaw(::grpc::ClientContext* context, const ::vrs::rpc::SearchRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vrs::rpc::SearchResult>::Create(channel_.get(), rpcmethod_Search_, context, request);
}

::grpc::ClientAsyncReader< ::vrs::rpc::SearchResult>* VrsRpc::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::vrs::rpc::SearchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vrs::rpc::SearchResult>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vrs::rpc::SearchResult>* VrsRpc::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::vrs::rpc::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vrs::rpc::SearchResult>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, false, nullptr);
}

::grpc::Status VrsRpc::Stub::ProcessVideo(::grpc::ClientContext* context, const ::vrs::rpc::ProcessVideoRequest& request, ::vrs::rpc::Result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ProcessVideo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vrs::rpc::Result>* VrsRpc::Stub::AsyncProcessVideoRaw(::grpc::ClientContext* context, const ::vrs::rpc::ProcessVideoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrs::rpc::Result>::Create(channel_.get(), cq, rpcmethod_ProcessVideo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vrs::rpc::Result>* VrsRpc::Stub::PrepareAsyncProcessVideoRaw(::grpc::ClientContext* context, const ::vrs::rpc::ProcessVideoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrs::rpc::Result>::Create(channel_.get(), cq, rpcmethod_ProcessVideo_, context, request, false);
}

::grpc::Status VrsRpc::Stub::Merge(::grpc::ClientContext* context, const ::vrs::rpc::Empty& request, ::vrs::rpc::Result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Merge_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vrs::rpc::Result>* VrsRpc::Stub::AsyncMergeRaw(::grpc::ClientContext* context, const ::vrs::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrs::rpc::Result>::Create(channel_.get(), cq, rpcmethod_Merge_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vrs::rpc::Result>* VrsRpc::Stub::PrepareAsyncMergeRaw(::grpc::ClientContext* context, const ::vrs::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrs::rpc::Result>::Create(channel_.get(), cq, rpcmethod_Merge_, context, request, false);
}

VrsRpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VrsRpc_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< VrsRpc::Service, ::vrs::rpc::SearchRequest, ::vrs::rpc::SearchResult>(
          std::mem_fn(&VrsRpc::Service::Search), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VrsRpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VrsRpc::Service, ::vrs::rpc::ProcessVideoRequest, ::vrs::rpc::Result>(
          std::mem_fn(&VrsRpc::Service::ProcessVideo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VrsRpc_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VrsRpc::Service, ::vrs::rpc::Empty, ::vrs::rpc::Result>(
          std::mem_fn(&VrsRpc::Service::Merge), this)));
}

VrsRpc::Service::~Service() {
}

::grpc::Status VrsRpc::Service::Search(::grpc::ServerContext* context, const ::vrs::rpc::SearchRequest* request, ::grpc::ServerWriter< ::vrs::rpc::SearchResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VrsRpc::Service::ProcessVideo(::grpc::ServerContext* context, const ::vrs::rpc::ProcessVideoRequest* request, ::vrs::rpc::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VrsRpc::Service::Merge(::grpc::ServerContext* context, const ::vrs::rpc::Empty* request, ::vrs::rpc::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* FaceRpc_method_names[] = {
  "/vrs.rpc.FaceRpc/BuildClassifer",
  "/vrs.rpc.FaceRpc/DetectPersonsInVideo",
  "/vrs.rpc.FaceRpc/DetectPersonInImg",
};

std::unique_ptr< FaceRpc::Stub> FaceRpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FaceRpc::Stub> stub(new FaceRpc::Stub(channel));
  return stub;
}

FaceRpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_BuildClassifer_(FaceRpc_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DetectPersonsInVideo_(FaceRpc_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DetectPersonInImg_(FaceRpc_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status FaceRpc::Stub::BuildClassifer(::grpc::ClientContext* context, const ::vrs::rpc::Empty& request, ::vrs::rpc::Result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BuildClassifer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vrs::rpc::Result>* FaceRpc::Stub::AsyncBuildClassiferRaw(::grpc::ClientContext* context, const ::vrs::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrs::rpc::Result>::Create(channel_.get(), cq, rpcmethod_BuildClassifer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vrs::rpc::Result>* FaceRpc::Stub::PrepareAsyncBuildClassiferRaw(::grpc::ClientContext* context, const ::vrs::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrs::rpc::Result>::Create(channel_.get(), cq, rpcmethod_BuildClassifer_, context, request, false);
}

::grpc::Status FaceRpc::Stub::DetectPersonsInVideo(::grpc::ClientContext* context, const ::vrs::rpc::DetectPersonsRequest& request, ::vrs::rpc::Result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DetectPersonsInVideo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vrs::rpc::Result>* FaceRpc::Stub::AsyncDetectPersonsInVideoRaw(::grpc::ClientContext* context, const ::vrs::rpc::DetectPersonsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrs::rpc::Result>::Create(channel_.get(), cq, rpcmethod_DetectPersonsInVideo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vrs::rpc::Result>* FaceRpc::Stub::PrepareAsyncDetectPersonsInVideoRaw(::grpc::ClientContext* context, const ::vrs::rpc::DetectPersonsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vrs::rpc::Result>::Create(channel_.get(), cq, rpcmethod_DetectPersonsInVideo_, context, request, false);
}

::grpc::ClientReader< ::vrs::rpc::DetectPersonInImgResult>* FaceRpc::Stub::DetectPersonInImgRaw(::grpc::ClientContext* context, const ::vrs::rpc::DetectPersonInImgRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vrs::rpc::DetectPersonInImgResult>::Create(channel_.get(), rpcmethod_DetectPersonInImg_, context, request);
}

::grpc::ClientAsyncReader< ::vrs::rpc::DetectPersonInImgResult>* FaceRpc::Stub::AsyncDetectPersonInImgRaw(::grpc::ClientContext* context, const ::vrs::rpc::DetectPersonInImgRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vrs::rpc::DetectPersonInImgResult>::Create(channel_.get(), cq, rpcmethod_DetectPersonInImg_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vrs::rpc::DetectPersonInImgResult>* FaceRpc::Stub::PrepareAsyncDetectPersonInImgRaw(::grpc::ClientContext* context, const ::vrs::rpc::DetectPersonInImgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vrs::rpc::DetectPersonInImgResult>::Create(channel_.get(), cq, rpcmethod_DetectPersonInImg_, context, request, false, nullptr);
}

FaceRpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRpc::Service, ::vrs::rpc::Empty, ::vrs::rpc::Result>(
          std::mem_fn(&FaceRpc::Service::BuildClassifer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRpc::Service, ::vrs::rpc::DetectPersonsRequest, ::vrs::rpc::Result>(
          std::mem_fn(&FaceRpc::Service::DetectPersonsInVideo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRpc_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FaceRpc::Service, ::vrs::rpc::DetectPersonInImgRequest, ::vrs::rpc::DetectPersonInImgResult>(
          std::mem_fn(&FaceRpc::Service::DetectPersonInImg), this)));
}

FaceRpc::Service::~Service() {
}

::grpc::Status FaceRpc::Service::BuildClassifer(::grpc::ServerContext* context, const ::vrs::rpc::Empty* request, ::vrs::rpc::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRpc::Service::DetectPersonsInVideo(::grpc::ServerContext* context, const ::vrs::rpc::DetectPersonsRequest* request, ::vrs::rpc::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRpc::Service::DetectPersonInImg(::grpc::ServerContext* context, const ::vrs::rpc::DetectPersonInImgRequest* request, ::grpc::ServerWriter< ::vrs::rpc::DetectPersonInImgResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ObjectRpc_method_names[] = {
  "/vrs.rpc.ObjectRpc/DetectObjectInImg",
};

std::unique_ptr< ObjectRpc::Stub> ObjectRpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ObjectRpc::Stub> stub(new ObjectRpc::Stub(channel));
  return stub;
}

ObjectRpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DetectObjectInImg_(ObjectRpc_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::vrs::rpc::DetectObjectInImgResult>* ObjectRpc::Stub::DetectObjectInImgRaw(::grpc::ClientContext* context, const ::vrs::rpc::DetectObjectInImgRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vrs::rpc::DetectObjectInImgResult>::Create(channel_.get(), rpcmethod_DetectObjectInImg_, context, request);
}

::grpc::ClientAsyncReader< ::vrs::rpc::DetectObjectInImgResult>* ObjectRpc::Stub::AsyncDetectObjectInImgRaw(::grpc::ClientContext* context, const ::vrs::rpc::DetectObjectInImgRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vrs::rpc::DetectObjectInImgResult>::Create(channel_.get(), cq, rpcmethod_DetectObjectInImg_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vrs::rpc::DetectObjectInImgResult>* ObjectRpc::Stub::PrepareAsyncDetectObjectInImgRaw(::grpc::ClientContext* context, const ::vrs::rpc::DetectObjectInImgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vrs::rpc::DetectObjectInImgResult>::Create(channel_.get(), cq, rpcmethod_DetectObjectInImg_, context, request, false, nullptr);
}

ObjectRpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObjectRpc_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ObjectRpc::Service, ::vrs::rpc::DetectObjectInImgRequest, ::vrs::rpc::DetectObjectInImgResult>(
          std::mem_fn(&ObjectRpc::Service::DetectObjectInImg), this)));
}

ObjectRpc::Service::~Service() {
}

::grpc::Status ObjectRpc::Service::DetectObjectInImg(::grpc::ServerContext* context, const ::vrs::rpc::DetectObjectInImgRequest* request, ::grpc::ServerWriter< ::vrs::rpc::DetectObjectInImgResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vrs
}  // namespace rpc

